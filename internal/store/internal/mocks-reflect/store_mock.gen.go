// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eampleev23/gophkeeper/internal/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=internal/store/internal/mocks-reflect/store_mock.gen.go -package=store_mocks github.com/eampleev23/gophkeeper/internal/store Store
//

// Package store_mocks is a generated GoMock package.
package store_mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/eampleev23/gophkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DBConnClose mocks base method.
func (m *MockStore) DBConnClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBConnClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// DBConnClose indicates an expected call of DBConnClose.
func (mr *MockStoreMockRecorder) DBConnClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConnClose", reflect.TypeOf((*MockStore)(nil).DBConnClose))
}

// GetBankCardByID mocks base method.
func (m *MockStore) GetBankCardByID(ctx context.Context, userID, inputID int) (models.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardByID indicates an expected call of GetBankCardByID.
func (mr *MockStoreMockRecorder) GetBankCardByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardByID", reflect.TypeOf((*MockStore)(nil).GetBankCardByID), ctx, userID, inputID)
}

// GetDataItemsByUserID mocks base method.
func (m *MockStore) GetDataItemsByUserID(ctx context.Context, userID int) ([]models.DataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.DataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataItemsByUserID indicates an expected call of GetDataItemsByUserID.
func (mr *MockStoreMockRecorder) GetDataItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataItemsByUserID", reflect.TypeOf((*MockStore)(nil).GetDataItemsByUserID), ctx, userID)
}

// GetLoginPassItemByID mocks base method.
func (m *MockStore) GetLoginPassItemByID(ctx context.Context, userID, inputID int) (models.LoginPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPassItemByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.LoginPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginPassItemByID indicates an expected call of GetLoginPassItemByID.
func (mr *MockStoreMockRecorder) GetLoginPassItemByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPassItemByID", reflect.TypeOf((*MockStore)(nil).GetLoginPassItemByID), ctx, userID, inputID)
}

// GetTextDataItemByID mocks base method.
func (m *MockStore) GetTextDataItemByID(ctx context.Context, userID, inputID int) (models.TextDataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDataItemByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.TextDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataItemByID indicates an expected call of GetTextDataItemByID.
func (mr *MockStoreMockRecorder) GetTextDataItemByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataItemByID", reflect.TypeOf((*MockStore)(nil).GetTextDataItemByID), ctx, userID, inputID)
}

// GetUserByLoginAndPassword mocks base method.
func (m *MockStore) GetUserByLoginAndPassword(ctx context.Context, userLoginReq models.UserLoginReq) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLoginAndPassword", ctx, userLoginReq)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLoginAndPassword indicates an expected call of GetUserByLoginAndPassword.
func (mr *MockStoreMockRecorder) GetUserByLoginAndPassword(ctx, userLoginReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLoginAndPassword", reflect.TypeOf((*MockStore)(nil).GetUserByLoginAndPassword), ctx, userLoginReq)
}

// InsertBankCard mocks base method.
func (m *MockStore) InsertBankCard(ctx context.Context, inputModel models.BankCard) (models.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBankCard", ctx, inputModel)
	ret0, _ := ret[0].(models.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBankCard indicates an expected call of InsertBankCard.
func (mr *MockStoreMockRecorder) InsertBankCard(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBankCard", reflect.TypeOf((*MockStore)(nil).InsertBankCard), ctx, inputModel)
}

// InsertLoginPassword mocks base method.
func (m *MockStore) InsertLoginPassword(ctx context.Context, inputModel models.LoginPassword) (models.LoginPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoginPassword", ctx, inputModel)
	ret0, _ := ret[0].(models.LoginPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLoginPassword indicates an expected call of InsertLoginPassword.
func (mr *MockStoreMockRecorder) InsertLoginPassword(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoginPassword", reflect.TypeOf((*MockStore)(nil).InsertLoginPassword), ctx, inputModel)
}

// InsertTextDataItem mocks base method.
func (m *MockStore) InsertTextDataItem(ctx context.Context, inputModel models.TextDataItem) (models.TextDataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTextDataItem", ctx, inputModel)
	ret0, _ := ret[0].(models.TextDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTextDataItem indicates an expected call of InsertTextDataItem.
func (mr *MockStoreMockRecorder) InsertTextDataItem(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTextDataItem", reflect.TypeOf((*MockStore)(nil).InsertTextDataItem), ctx, inputModel)
}

// InsertUser mocks base method.
func (m *MockStore) InsertUser(ctx context.Context, userRegReq models.UserRegReq) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, userRegReq)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockStoreMockRecorder) InsertUser(ctx, userRegReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockStore)(nil).InsertUser), ctx, userRegReq)
}
