// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eampleev23/gophkeeper/internal/services (interfaces: Services)
//
// Generated by this command:
//
//	mockgen -destination=github.com/eampleev23/gophkeeper/internal/services/internal/mocks/services_mock.gen.go -package=mocks github.com/eampleev23/gophkeeper/internal/services Services
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/eampleev23/gophkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
	isgomock struct{}
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// GetBankCardByID mocks base method.
func (m *MockServices) GetBankCardByID(ctx context.Context, userID, inputID int) (models.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankCardByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankCardByID indicates an expected call of GetBankCardByID.
func (mr *MockServicesMockRecorder) GetBankCardByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankCardByID", reflect.TypeOf((*MockServices)(nil).GetBankCardByID), ctx, userID, inputID)
}

// GetDataItemsByUserID mocks base method.
func (m *MockServices) GetDataItemsByUserID(ctx context.Context, userID int) ([]models.DataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.DataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataItemsByUserID indicates an expected call of GetDataItemsByUserID.
func (mr *MockServicesMockRecorder) GetDataItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataItemsByUserID", reflect.TypeOf((*MockServices)(nil).GetDataItemsByUserID), ctx, userID)
}

// GetLoginPassItemByID mocks base method.
func (m *MockServices) GetLoginPassItemByID(ctx context.Context, userID, inputID int) (models.LoginPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginPassItemByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.LoginPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginPassItemByID indicates an expected call of GetLoginPassItemByID.
func (mr *MockServicesMockRecorder) GetLoginPassItemByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginPassItemByID", reflect.TypeOf((*MockServices)(nil).GetLoginPassItemByID), ctx, userID, inputID)
}

// GetTextDataItemByID mocks base method.
func (m *MockServices) GetTextDataItemByID(ctx context.Context, userID, inputID int) (models.TextDataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTextDataItemByID", ctx, userID, inputID)
	ret0, _ := ret[0].(models.TextDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTextDataItemByID indicates an expected call of GetTextDataItemByID.
func (mr *MockServicesMockRecorder) GetTextDataItemByID(ctx, userID, inputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTextDataItemByID", reflect.TypeOf((*MockServices)(nil).GetTextDataItemByID), ctx, userID, inputID)
}

// InsertBankCard mocks base method.
func (m *MockServices) InsertBankCard(ctx context.Context, inputModel models.BankCard) (models.BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBankCard", ctx, inputModel)
	ret0, _ := ret[0].(models.BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBankCard indicates an expected call of InsertBankCard.
func (mr *MockServicesMockRecorder) InsertBankCard(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBankCard", reflect.TypeOf((*MockServices)(nil).InsertBankCard), ctx, inputModel)
}

// InsertLoginPassword mocks base method.
func (m *MockServices) InsertLoginPassword(ctx context.Context, inputModel models.LoginPassword) (models.LoginPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoginPassword", ctx, inputModel)
	ret0, _ := ret[0].(models.LoginPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLoginPassword indicates an expected call of InsertLoginPassword.
func (mr *MockServicesMockRecorder) InsertLoginPassword(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoginPassword", reflect.TypeOf((*MockServices)(nil).InsertLoginPassword), ctx, inputModel)
}

// InsertTextDataItem mocks base method.
func (m *MockServices) InsertTextDataItem(ctx context.Context, inputModel models.TextDataItem) (models.TextDataItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTextDataItem", ctx, inputModel)
	ret0, _ := ret[0].(models.TextDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTextDataItem indicates an expected call of InsertTextDataItem.
func (mr *MockServicesMockRecorder) InsertTextDataItem(ctx, inputModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTextDataItem", reflect.TypeOf((*MockServices)(nil).InsertTextDataItem), ctx, inputModel)
}
